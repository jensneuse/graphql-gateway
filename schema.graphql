directive @ListFilterFirstN(n: Int!) on FIELD_DEFINITION

directive @StaticDataSource (
    data: String
) on FIELD_DEFINITION

directive @NatsDataSource (
    addr: String!
    topic: String!
) on FIELD_DEFINITION

directive @mapping(
    mode: MAPPING_MODE! = PATH_SELECTOR
    pathSelector: String
) on FIELD_DEFINITION

enum MAPPING_MODE {
    NONE
    PATH_SELECTOR
}

directive @HttpJsonDataSource (
    host: String!
    url: String!
    method: HTTP_METHOD = GET
    params: [Parameter]
    body: String
    headers: [Header]
) on FIELD_DEFINITION

input Header {
    key: String!
    value: String!
}

directive @GraphQLDataSource (
    host: String!
    url: String!
    method: HTTP_METHOD = POST
    field: String
    params: [Parameter]
) on FIELD_DEFINITION

directive @HttpPollingStreamDataSource (
    host: String!
    url: String!
    method: HTTP_METHOD = GET
    delaySeconds: Int = 5
    params: [Parameter]
) on FIELD_DEFINITION

enum HTTP_METHOD {
    GET
    POST
    UPDATE
    DELETE
}

input Parameter {
    name: String!
    sourceKind: PARAMETER_SOURCE!
    sourceName: String!
    variableType: String!
}

enum PARAMETER_SOURCE {
    CONTEXT_VARIABLE
    OBJECT_VARIABLE_ARGUMENT
    FIELD_ARGUMENTS
}

schema {
    query: Query
    mutation: Mutation
    subscription: Subscription
}

type Foo {
    bar: String!
}

type Headers {
    userAgent: String! @mapping(pathSelector: "User-Agent")
    host: String! @mapping(pathSelector: "Host")
    acceptEncoding: String @mapping(pathSelector: "Accept-Encoding")
    Authorization: String
}

type HttpBinGet {
    headers: Headers!
}

type JSONPlaceholderPost {
    userId: Int!
    id: Int!
    title: String!
    body: String!
    comments: [JSONPlaceholderComment]
    @HttpJsonDataSource(
        host: "jsonplaceholder.typicode.com"
        url: "/comments?postId={{ .postId }}"
        params: [
            {
                name: "postId"
                sourceKind: OBJECT_VARIABLE_ARGUMENT
                sourceName: "id"
                variableType: "String"
            }
        ]
    )
    @mapping(mode: NONE)
}

type JSONPlaceholderComment {
    postId: Int!
    id: Int!
    name: String!
    email: String!
    body: String!
}

type Observation {
    description: String
    skyDescription: String
    temperature: Float
    temperatureDesc: String
    highTemperature: Float
    lowTemperature: Float
}

type Location {
    country: String
    state: String
    city: String
    observation: [Observation]
        @ListFilterFirstN(n: 1)
}

type Observations {
    location: [Location]
        @ListFilterFirstN(n: 1)
}

type Weather {
    observations: Observations
}

type Coordinates {
    lat: Float
    lon: Float
}

type Country {
    code: String
    name: String
    native: String
    phone: String
    continent: Continent
    currency: String
    languages: [Language]
    emoji: String
    emojiU: String
    coordinates: [Coordinates]
    @HttpJsonDataSource(
        host: "locationiq.com"
        url: "/v1/search_sandbox.php?format=json&q={{ .name }}&accept-language=en"
        params: [
            {
                name: "name"
                sourceKind: OBJECT_VARIABLE_ARGUMENT
                sourceName: "name"
                variableType: "String"
            }
        ]
    )
    @mapping(mode: NONE)
}

type Continent {
    code: String
    name: String
    countries: [Country]
}

type Language {
    code: String
    name: String
    native: String
    rtl: Int
}

"The query type, represents all of the entry points into our object graph"
type Query {
    hello: String!
    @StaticDataSource(
        data: "World!"
    )
    @mapping(mode: NONE)
    staticBoolean: Boolean!
    @StaticDataSource(
        data: "true"
    )
    @mapping(mode: NONE)
    nonNullInt: Int!
    @StaticDataSource(
        data: "1"
    )
    @mapping(mode: NONE)
    nullableInt: Int
    @StaticDataSource(
        data: null
    )
    @mapping(mode: NONE)
    foo: Foo!
    @StaticDataSource(
        data: "{\"bar\": \"baz\"}"
    )
    @mapping(mode: NONE)
    httpBinGet: HttpBinGet
    @HttpJsonDataSource(
        host: "httpbin.org"
        url: "/get"
        headers: [
            {
                key: "Authorization"
                value: "{{ .request.headers.Authorization }}"
            }
        ]
    )
    @mapping(mode: NONE)
    post(id: Int!): JSONPlaceholderPost
    @HttpJsonDataSource(
        host: "jsonplaceholder.typicode.com"
        url: "/posts/{{ .arguments.id }}"
    )
    @mapping(mode: NONE)
    country(code: String!): Country
    @GraphQLDataSource(
        host: "countries.trevorblades.com"
        url: "/"
        field: "country"
        params: [
            {
                name: "code"
                sourceKind: FIELD_ARGUMENTS
                sourceName: "code"
                variableType: "String!"
            }
        ]
    )
    __schema: __Schema!
    __type(name: String!): __Type
}

type Subscription {
    localTime: LocalTime
        @HttpPollingStreamDataSource(
            host: "http://localhost:9111"
            url: "/time"
        )
        @mapping(mode: NONE)
    natsTime: NatsTime
        @NatsDataSource(
            addr: "nats://0.0.0.0:4222"
            topic: "time"
        )
        @mapping(mode: NONE)
}

type NatsTime {
    time: String! @mapping(pathSelector: "Time")
}

type LocalTime {
    datetime: String
    timezone: String
    abbreviation: String
}


type Mutation {
    httpBinPost(input: HttpBinPostInput): HttpBinPostResponse
        @HttpJsonDataSource(
            host: "httpbin.org"
            url: "/post"
            method: POST
            body: "{{ .arguments.input }}"
        )
        @mapping(mode: NONE)
}

input HttpBinPostInput {
    foo: String!
}

type HttpBinPostResponse {
    headers: Headers
    data: HttpBinPostResponseData @mapping(pathSelector: "json")
}

type HttpBinPostResponseData {
    foo: String
}