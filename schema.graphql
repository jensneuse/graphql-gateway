directive @ListFilterFirstN(n: Int!) on FIELD_DEFINITION

directive @StaticDataSource (
    data: String
) on FIELD_DEFINITION

"""
mapping is the directive to define mappings from response objects to GraphQL fields
"""
directive @mapping(
    """
    mode defines the operating mode of the mapping
    """
    mode: MAPPING_MODE! = PATH_SELECTOR
    """
    pathSelector is the optional selector String to customize the mappings
    see https://github.com/tidwall/gjson for more information on what syntax is possible
    """
    pathSelector: String
) on FIELD_DEFINITION

"""
MAPPING_MODE is the enum to define the different mapper modes
"""
enum MAPPING_MODE {
    """
    NONE is the mode to skip mappings at all, therefore the parent object will directly get passed to the child
    """
    NONE
    """
    PATH_SELECTOR is the mode which applies a path selector string on the parent object before passing it to the child
    see https://github.com/tidwall/gjson for more information on what syntax is possible
    """
    PATH_SELECTOR
}

directive @HttpJsonDataSource (
    """
    the host of the origin
    """
    host: String!
    """
    the url of the origin
    """
    url: String!
    """
    the HTTP method the client should use for the request, defaults to GET
    """
    method: HTTP_METHOD = GET
    """
    parameters
    """
    params: [Parameter]
) on FIELD_DEFINITION

directive @GraphQLDataSource (
    """
    the host of the origin
    """
    host: String!
    """
    the url of the origin
    """
    url: String!
    """
    the HTTP method the client should use for the request, defaults to GET
    """
    method: HTTP_METHOD = POST
    """
    the field/entry point on the remote schema
    """
    field: String
    """
    parameters
    """
    params: [Parameter]
) on FIELD_DEFINITION

"""
HttpPollingStreamDataSource
"""
directive @HttpPollingStreamDataSource (
    """
    host is the host name of the data source, e.g. example.com
    """
    host: String!
    """
    url is the URL from which the data source should poll data from
    you could use golang templating syntax, e.g.:
    '/users/{{ .id }}' + parameter named id with value 1 (see below) will render to URL '/users/1'
    """
    url: String!
    "method is the HTTP method the data source should use to fetch data from the upstream"
    method: HTTP_METHOD = GET
    "the delay in seconds between each polling"
    delaySeconds: Int = 5
    """
    params are the parameters that should get passed to the data source
    you could use this function to pass variables from field variables, the context or parent object to the data source
    thse could be used to 'render' the url dynamically
    """
    params: [Parameter]
) on FIELD_DEFINITION

enum HTTP_METHOD {
    GET
    POST
    UPDATE
    DELETE
}

"""
Parameter is useful to map variables from various sources into the data source executor.
"""
input Parameter {
    """
    this is the name by which the execution engine will access the variable
    """
    name: String!
    """
    the kind of the parameter source
    currently sources: the context, the enclosing object (at execution time), field variables
    """
    sourceKind: PARAMETER_SOURCE!
    """
    name of the parameter on the source
    """
    sourceName: String!
    """
    type name of the variable, used to generate a valid GraphQL query for the upstream
    """
    variableType: String!
}

enum PARAMETER_SOURCE {
    CONTEXT_VARIABLE
    OBJECT_VARIABLE_ARGUMENT
    FIELD_ARGUMENTS
}

schema {
    query: Query
    subscription: Subscription
}

type Foo {
    bar: String!
}

type Headers {
    userAgent: String! @mapping(pathSelector: "User-Agent")
    host: String! @mapping(pathSelector: "Host")
    acceptEncoding: String @mapping(pathSelector: "Accept-Encoding")
    Authorization: String
}

type HttpBinGet {
    headers: Headers!
}

type JSONPlaceholderPost {
    userId: Int!
    id: Int!
    title: String!
    body: String!
    comments: [JSONPlaceholderComment]
    @HttpJsonDataSource(
        host: "jsonplaceholder.typicode.com"
        url: "/comments?postId={{ .postId }}"
        params: [
            {
                name: "postId"
                sourceKind: OBJECT_VARIABLE_ARGUMENT
                sourceName: "id"
                variableType: "String"
            }
        ]
    )
    @mapping(mode: NONE)
}

type JSONPlaceholderComment {
    postId: Int!
    id: Int!
    name: String!
    email: String!
    body: String!
}

type Observation {
    description: String
    skyDescription: String
    temperature: Float
    temperatureDesc: String
    highTemperature: Float
    lowTemperature: Float
}

type Location {
    country: String
    state: String
    city: String
    observation: [Observation]
        @ListFilterFirstN(n: 1)
}

type Observations {
    location: [Location]
        @ListFilterFirstN(n: 1)
}

type Weather {
    observations: Observations
}

type Coordinates {
    lat: Float
    lon: Float
    weather: Weather
        @HttpJsonDataSource(
            host: "https://weather.cit.api.here.com"
            url: "/weather/1.0/report.json?product=observation&latitude={{ .lat }}&longitude={{ .lon }}&oneobservation=true&app_id=DemoAppId01082013GAL&app_code=AJKnXv84fjrb0KIHawS0Tg"
            params: [
                {
                    name: "lat"
                    sourceKind: OBJECT_VARIABLE_ARGUMENT
                    sourceName: "lat"
                    variableType: "Float"
                },
                {
                    name: "lon"
                    sourceKind: OBJECT_VARIABLE_ARGUMENT
                    sourceName: "lon"
                    variableType: "Float"
                }
            ]
        )
        @mapping(mode: NONE)
}

type Country {
    code: String
    name: String
    native: String
    phone: String
    continent: Continent
    currency: String
    languages: [Language]
    emoji: String
    emojiU: String
    coordinates: [Coordinates]
    @HttpJsonDataSource(
        host: "locationiq.com"
        url: "/v1/search_sandbox.php?format=json&q={{ .name }}&accept-language=en"
        params: [
            {
                name: "name"
                sourceKind: OBJECT_VARIABLE_ARGUMENT
                sourceName: "name"
                variableType: "String"
            }
        ]
    )
    @mapping(mode: NONE)
}

type Continent {
    code: String
    name: String
    countries: [Country]
}

type Language {
    code: String
    name: String
    native: String
    rtl: Int
}

"The query type, represents all of the entry points into our object graph"
type Query {
    hello: String!
    @StaticDataSource(
        data: "World!"
    )
    @mapping(mode: NONE)
    staticBoolean: Boolean!
    @StaticDataSource(
        data: "true"
    )
    @mapping(mode: NONE)
    nonNullInt: Int!
    @StaticDataSource(
        data: "1"
    )
    @mapping(mode: NONE)
    nullableInt: Int
    @StaticDataSource(
        data: null
    )
    @mapping(mode: NONE)
    foo: Foo!
    @StaticDataSource(
        data: "{\"bar\": \"baz\"}"
    )
    @mapping(mode: NONE)
    httpBinGet: HttpBinGet
    @HttpJsonDataSource(
        host: "httpbin.org"
        url: "/get"
        headers: [
            {
                key: "Authorization"
                value: "{{ .request.headers.Authorization }}"
            }
        ]
    )
    @mapping(mode: NONE)
    post(id: Int!): JSONPlaceholderPost
    @HttpJsonDataSource(
        host: "jsonplaceholder.typicode.com"
        url: "/posts/{{ .id }}"
        params: [
            {
                name: "id"
                sourceKind: FIELD_ARGUMENTS
                sourceName: "id"
                variableType: "Int!"
            }
        ]
    )
    @mapping(mode: NONE)
    country(code: String!): Country
    @GraphQLDataSource(
        host: "countries.trevorblades.com"
        url: "/"
        field: "country"
        params: [
            {
                name: "code"
                sourceKind: FIELD_ARGUMENTS
                sourceName: "code"
                variableType: "String!"
            }
        ]
    )
    __schema: __Schema!
    __type(name: String!): __Type
}

type Subscription {
    localTime: LocalTime
        @HttpPollingStreamDataSource(
            host: "http://localhost:9111"
            url: "/time"
        )
        @mapping(mode: NONE)
    realTime: RealTime
        @HttpPollingStreamDataSource(
            host: "worldtimeapi.org"
            url: "/api/ip"
        )
        @mapping(mode: NONE)
}

type LocalTime {
    datetime: String
    timezone: String
    abbreviation: String
}

type RealTime {
    weekNumber: Int @mapping(pathSelector: "week_number")
    unixTime: Int @mapping(pathSelector: "unixtime")
    timezone: String
    coordinates: [Coordinates]
        @HttpJsonDataSource(
            host: "locationiq.com"
            url: "/v1/search_sandbox.php?format=json&q={{ .name }}&accept-language=en"
            params: [
                {
                    name: "name"
                    sourceKind: OBJECT_VARIABLE_ARGUMENT
                    sourceName: "timezone"
                    variableType: "String"
                }
            ]
        )
        @mapping(mode: NONE)
        @ListFilterFirstN(n: 1)
}