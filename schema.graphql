directive @mapTo(
    objectField: String!
) on FIELD_DEFINITION

directive @StaticDataSource (
    data: String
) on FIELD_DEFINITION

directive @HttpJsonDataSource (
    """
    the host of the origin
    """
    host: String!
    """
    the url of the origin
    """
    url: String!
    """
    the HTTP method the client should use for the request, defaults to GET
    """
    method: HTTP_METHOD = GET
    """
    parameters
    """
    params: [Parameter]
) on FIELD_DEFINITION

directive @GraphQLDataSource (
    """
    the host of the origin
    """
    host: String!
    """
    the url of the origin
    """
    url: String!
    """
    the HTTP method the client should use for the request, defaults to GET
    """
    method: HTTP_METHOD = POST
    """
    parameters
    """
    params: [Parameter]
) on FIELD_DEFINITION

enum HTTP_METHOD {
    GET
    POST
    UPDATE
    DELETE
}

"""
Parameter is useful to map variables from various sources into the data source executor.
"""
input Parameter {
    """
    this is the name by which the execution engine will access the variable
    """
    name: String!
    """
    the kind of the parameter source
    currently sources: the context, the enclosing object (at execution time), field variables
    """
    sourceKind: PARAMETER_SOURCE!
    """
    name of the parameter on the source
    """
    sourceName: String!
    """
    type name of the variable, used to generate a valid GraphQL query for the upstream
    """
    variableType: String!
}

enum PARAMETER_SOURCE {
    CONTEXT_VARIABLE
    OBJECT_VARIABLE_ARGUMENT
    FIELD_ARGUMENTS
}

input Mapping {
    from: String!
    to: String!
}

schema {
    query: Query
}

type Foo {
    bar: String!
}

type Headers {
    accept: String! @mapTo(objectField: "Accept")
    host: String! @mapTo(objectField: "Host")
    acceptEncoding: String @mapTo(objectField: "Accept-Encoding")
}

type HttpBinGet {
    headers: Headers!
}

type JSONPlaceholderPost {
    userId: Int!
    id: Int!
    title: String!
    body: String!
    comments: [JSONPlaceholderComment]
    @HttpJsonDataSource(
        host: "jsonplaceholder.typicode.com"
        url: "/comments?postId={{ .postId }}"
        params: [
            {
                name: "postId"
                sourceKind: OBJECT_VARIABLE_ARGUMENT
                sourceName: "id"
                variableType: "String"
            }
        ]
    )
}

type JSONPlaceholderComment {
    postId: Int!
    id: Int!
    name: String!
    email: String!
    body: String!
}

type Observation {
    description: String
    skyDescription: String
    temperature: Float
    temperatureDesc: String
    highTemperature: Float
    lowTemperature: Float
}

type Location {
    country: String
    state: String
    city: String
    observation: [Observation]
}

type Observations {
    location: [Location]
}

type Weather {
    observations: Observations
}

type Coordinates {
    lat: Float
    lon: Float
    weather: Weather
        @HttpJsonDataSource(
            host: "https://weather.cit.api.here.com"
            url: "/weather/1.0/report.json?product=observation&latitude={{ .lat }}&longitude={{ .lon }}&oneobservation=true&app_id=DemoAppId01082013GAL&app_code=AJKnXv84fjrb0KIHawS0Tg"
            params: [
                {
                    name: "lat"
                    sourceKind: OBJECT_VARIABLE_ARGUMENT
                    sourceName: "lat"
                    variableType: "Float"
                },
                {
                    name: "lon"
                    sourceKind: OBJECT_VARIABLE_ARGUMENT
                    sourceName: "lon"
                    variableType: "Float"
                }
            ]
        )
}

type Country {
    code: String
    name: String
    native: String
    phone: String
    continent: Continent
    currency: String
    languages: [Language]
    emoji: String
    emojiU: String
    coordinates: [Coordinates]
    @HttpJsonDataSource(
        host: "locationiq.com"
        url: "/v1/search_sandbox.php?format=json&q={{ .name }}&accept-language=en"
        params: [
            {
                name: "name"
                sourceKind: OBJECT_VARIABLE_ARGUMENT
                sourceName: "name"
                variableType: "String"
            }
        ]
    )
}

type Continent {
    code: String
    name: String
    countries: [Country]
}

type Language {
    code: String
    name: String
    native: String
    rtl: Int
}

"The query type, represents all of the entry points into our object graph"
type Query {
    hello: String!
    @StaticDataSource(
        data: "World!"
    )
    staticBoolean: Boolean!
    @StaticDataSource(
        data: "true"
    )
    nonNullInt: Int!
    @StaticDataSource(
        data: "1"
    )
    nullableInt: Int
    @StaticDataSource(
        data: null
    )
    foo: Foo!
    @StaticDataSource(
        data: "{\"bar\": \"baz\"}"
    )
    httpBinGet: HttpBinGet
    @HttpJsonDataSource(
        host: "httpbin.org"
        url: "/get"
    )
    post(id: Int!): JSONPlaceholderPost
    @HttpJsonDataSource(
        host: "jsonplaceholder.typicode.com"
        url: "/posts/{{ .id }}"
        params: [
            {
                name: "id"
                sourceKind: FIELD_ARGUMENTS
                sourceName: "id"
                variableType: "Int!"
            }
        ]
    )
    country(code: String!): Country
    @GraphQLDataSource(
        host: "countries.trevorblades.com"
        url: "/"
        field: "country"
        params: [
            {
                name: "code"
                sourceKind: FIELD_ARGUMENTS
                sourceName: "code"
                variableType: "String!"
            }
        ]
    )
    __schema: __Schema!
    __type(name: String!): __Type
}